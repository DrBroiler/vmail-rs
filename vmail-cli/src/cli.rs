use clap::{App, AppSettings, Arg, SubCommand};

pub fn build_cli() -> App<'static, 'static> {
    App::new("vmail")
        .version("0.1.0")
        .author("Armin Widegreen <vmail@widegreen.net>")
        .about("A CLI client for vmail")
        .global_setting(AppSettings::InferSubcommands)
        .setting(AppSettings::SubcommandRequiredElseHelp)
        .subcommand(SubCommand::with_name("user")
                    .about("User management for the vmail database")
                    .setting(AppSettings::SubcommandRequiredElseHelp)
                    .subcommand(SubCommand::with_name("show")
                                .about("Show user account(s)")
                                .arg(Arg::with_name("USER")
                                     .help("Name of the user account which should be shown"))
                                .arg(Arg::with_name("domain")
                                     .value_name("domain")
                                     .long("domain")
                                     .short("d")
                                     .help("Filter on domain")))
                    .subcommand(SubCommand::with_name("add")
                                .about("Add a user to the database")
                                .alias("create")
                                .alias("new")
                                .arg(Arg::with_name("USER")
                                     .required(true)
                                     .help("Name of the user which should be added, without domain name, e.g. 'newuser1'"))
                                .arg(Arg::with_name("DOMAIN")
                                     .required(true)
                                     .help("Domain for the new user, e.g.  mydomain.tld. New domains has to be added first"))
                                .arg(Arg::with_name("disabled")
                                     .long("disabled")
                                     .short("d")
                                     .help("Disable the user, just add it to the database"))
                                .arg(Arg::with_name("sendonly")
                                     .long("send-only")
                                     .short("s")
                                     .help("Allow the new user only to send email but not receive any."))
                                .arg(Arg::with_name("quota")
                                     .value_name("quota")
                                     .long("quota")
                                     .short("q")
                                     .default_value("0")
                                     .help("Quota for user account in MB (Megabyte), default is 0 which is unlimited")))
                    .subcommand(SubCommand::with_name("remove")
                                .about("Remove a user from the database, will also delete all aliases for the user")
                                .alias("rm")
                                .alias("delete")
                                .arg(Arg::with_name("force")
                                     .long("force")
                                     .short("f")
                                     .help("Force the deleting the given user"))
                                .arg(Arg::with_name("verbose")
                                     .long("verbose")
                                     .short("v")
                                     .help("Verbose output what has been deleted"))
                                .arg(Arg::with_name("USER")
                                     .required(true)
                                     .help("Userwhich should be removed"))
                                .arg(Arg::with_name("DOMAIN")
                                     .required(true)
                                     .help("Domain for the user, e.g. mydomain.tld"))
                    .subcommand(SubCommand::with_name("password")
                                .about("Change the password for given user")
                                .alias("pw")
                                .arg(Arg::with_name("USER")))
                    .subcommand(SubCommand::with_name("edit")
                                .about("Edit a user account entry")
                                .alias("change")
                                .arg(Arg::with_name("USER")
                                     .help("The user name which should be edited")
                                     .required(true))
                                .arg(Arg::with_name("DOMAIN")
                                     .required(true)
                                     .help("Domain for the user, e.g. mydomain.tld"))
                                .arg(Arg::with_name("disabled")
                                     .long("disabled")
                                     .short("d")
                                     .help("Set user to disabled"))
                                .arg(Arg::with_name("sendonly")
                                     .long("send-only")
                                     .short("s")
                                     .help("Allow the user only to send email"))
                                .arg(Arg::with_name("quota")
                                     .value_name("quota")
                                     .long("quota")
                                     .short("q")
                                     .help("Quota for user account in MB (Megabyte), 0 is unlimited")))))
        .subcommand(SubCommand::with_name("domain")
                    .about("Manage domains for a vmail database")
                    .setting(AppSettings::SubcommandRequiredElseHelp)
                    .subcommand(SubCommand::with_name("show")
                                .about("Show domains")
                                .aliases(&["list", "ls"])
                                .arg(Arg::with_name("DOMAIN")
                                     .help("Filter on domain"))
                                .arg(Arg::with_name("with-users")
                                     .long("with-users")
                                     .short("u")
                                     .help("Show all users for the domain"))
                                .arg(Arg::with_name("with-aliases")
                                     .long("with-aliases")
                                     .short("a")
                                     .requires("with-users")
                                     .help("Show all aliases for the users")))
                    .subcommand(SubCommand::with_name("add")
                                .about("Add a new domain to the database")
                                .arg(Arg::with_name("DOMAIN")
                                     .required(true)
                                     .help("The domain name which should be added.")))
                    .subcommand(SubCommand::with_name("remove")
                                .about("Remove a domain from the database, this will also delete all related users.")
                                .aliases(&["rm", "delete"])
                                .arg(Arg::with_name("force")
                                     .long("force")
                                     .short("f")
                                     .help("Force the deleting the given domain"))
                                .arg(Arg::with_name("verbose")
                                     .long("verbose")
                                     .short("v")
                                     .help("Verbose output what has been deleted"))
                                .arg(Arg::with_name("DOMAIN")
                                     .required(true)
                                     .help("The domain name which should be deleted."))))
        .subcommand(SubCommand::with_name("alias")
                    .about("Manage aliases for the vmail database")
                    .setting(AppSettings::SubcommandRequiredElseHelp)
                    .subcommand(SubCommand::with_name("show")
                                .about("Show aliases for user")
                                .aliases(&["list", "ls"])
                                .arg(Arg::with_name("DEST_USER")
                                     .requires("DEST_DOMAIN")
                                     .help("username to filter for"))
                                .arg(Arg::with_name("DEST_DOMAIN")
                                     .help("domain to filter for")))
                    .subcommand(SubCommand::with_name("add")
                                .about("Add an alias to an existing user account")
                                .aliases(&["create", "new"])
                                .arg(Arg::with_name("USER")
                                     .required(true)
                                     .help("The username for the alias"))
                                .arg(Arg::with_name("DOMAIN")
                                     .required(true)
                                     .help("Existing domain for the alias"))
                                .arg(Arg::with_name("DEST_USER")
                                     .required(true)
                                     .help("Existing user account"))
                                .arg(Arg::with_name("DEST_DOMAIN")
                                     .help("If not specified, this will assume to DOMAIN value"))
                                .arg(Arg::with_name("disabled")
                                     .long("disabled")
                                     .short("d")
                                     .help("Set alias to disabled")))
                    .subcommand(SubCommand::with_name("remove")
                                .about("Remove an alias from the database")
                                .alias("rm")
                                .alias("delete")
                                .arg(Arg::with_name("USER")
                                     .required(true)
                                     .help(""))
                                .arg(Arg::with_name("DOMAIN")
                                     .required(true)
                                     .help("Existing domain"))))
}
